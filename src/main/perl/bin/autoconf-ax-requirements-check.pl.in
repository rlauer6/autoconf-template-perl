#!/usr/bin/env perl

use strict;
use warnings;

# SCANDEPS=scandeps-static.pl --no-core --no-include-require

use Autoconf::Constants qw(:all);
use Autoconf::Utils qw(:all);
use Carp;
use Data::Dumper;
use English qw(-no_match_vars);
use File::Find;
use Getopt::Long;
use JSON::PP;
use List::Util qw(pairs any);
use Log::Log4perl qw(:easy);
use Module::ScanDeps::Static;

our $VERSION = '@PACKAGE_VERSION@'; ## no critic (RequireInterpolation)

########################################################################
sub get_required_modules {
########################################################################
  my ( $path, $type ) = @_;

  my @files = find_files( $path, $type );

  my @dependencies;
  my @names;

  foreach my $file (@files) {
    my $scanner
      = Module::ScanDeps::Static->new( { core => 0, path => $file } );

    $scanner->parse;

    my @required;

    for my $r ( $scanner->get_dependencies() ) {
      next if any { $r->{name} eq $_ } map { $_->{name} } @dependencies;

      push @dependencies, $r;
    }
  }

  return [ map { { path => $path, %{$_} } } @dependencies ];
}

########################################################################
sub create_ax_requirements_check {
########################################################################
  my ( $required, %options ) = @_;

  my $template = <<'END_OF_TEMPLATE';
AC_DEFUN([AX_REQUIREMENTS_CHECK],[
[% FOREACH module IN required %]
  ads_PERL_MODULE([[% module.name %]], [], [[% module.version %]])[% END %]
])
END_OF_TEMPLATE

  if ( @{$required} ) {
    render_tt_template( \$template, { required => $required },
      $options{'out-file'} );
  }

  return;
}

########################################################################
sub get_provided_modules {
########################################################################
  my ($path) = @_;

  my @provided;

  $path //= 'src/main/perl';

  find(
    sub {
      return if $File::Find::name !~ /[.]p[ml][.]in$/;
      push @provided, $File::Find::name;
    },
    $path
  );

  return @provided;
}

########################################################################
sub remove_provided_modules {
########################################################################
  my ( $dependencies, $path ) = @_;

  my @required;

  for my $dependency ( @{$dependencies} ) {

    my $module = $dependency->{name};
    next if $module eq 'perl';

    my $module_path = $module;
    $module_path =~ s/::/\//xsmg;
    $module_path = sprintf '%s/src/main/perl/lib/%s.pm.in', $path,
      $module_path;

    TRACE Dumper( [ 'testing ', $dependency, $module, $module_path, $path ] );

    next if -e $module_path;

    push @required, $dependency;
  }

  return \@required;
}

########################################################################
sub find_dependencies {
########################################################################
  my ($root) = @_;

  my $dependencies = [];

  for my $p ( pairs qw(cgi-bin pl bin pl lib pm) ) {
    my $path = sprintf '%s/src/main/perl/%s', $root, $p->[0];
    next if !-d $path;

    DEBUG 'looking for files in ' . $path;

    push @{$dependencies}, @{ get_required_modules( $path, $p->[1] ) };
  }
  return $dependencies;

}

########################################################################
sub help {
########################################################################
  my $name = basename $PROGRAM_NAME;

  return print <<"END_OF_HELP";
usage: $name options

Options
-------
-h, --help        help
-r, --root-dir    root directory of project
-o, --out-file    name of the output file
-v, --version     report script version

This utility is part of the `autoconf-template-perl` toolchain. It will
create an m4 macro that checks for your Perl module dependencies.

See `perldoc Autoconf::Template` for more of the gory details.

$COPYRIGHT
END_OF_HELP
}

########################################################################
sub main {
########################################################################
  my %options;

  GetOptions( \%options, 'help', 'root-dir=s', 'out-file=s', 'version' );

  return help()
    if $options{help};

  return version($VERSION)
    if $options{version};

  my $root = $options{'root-dir'} //= find_root_dir();

  init_logger();

  croak "this doesn't look much like a project directory\n"
    if !-d "$root/src/main/perl/lib";

  my $dependencies = find_dependencies($root);

  DEBUG Dumper($dependencies);

  my $required = remove_provided_modules( $dependencies, $root );

  DEBUG Dumper($required);

  create_ax_requirements_check( $required, %options );

  return;
}

main();

1;

__END__
